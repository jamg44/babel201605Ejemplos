#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('ejemploexpress:server');
var http = require('http');
//var http = require('https'); // ssl

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
// var port = normalizePort(process.env.PORT || '443'); // ssl
app.set('port', port);

// Cargar certificados en options - SSL
/*var fs = require('fs');
var options = {
  key: fs.readFileSync('certificados/host.key'),
  cert: fs.readFileSync('certificados/host.cert')
};*/


// Control de cluster - inicio

var cluster = require('cluster');

if (cluster.isMaster) {

  // eventos del cluster

  cluster.on('online', function(worker) {
    console.log('Worker ' + worker.id + ' is online with pid ' + worker.process.pid);
  });

  cluster.on('listening', function(worker, address) {
    console.log('Worker ' + worker.process.pid + ' is now connected to ' +
      address.address + ':' + address.port);
  });

  cluster.on('disconnect', function(worker) {
    console.log('The worker #' + worker.process.pid + ' has been disconnected');
    console.log('Starting a new worker');
    cluster.fork();
  });

  // Soy el master, arranco workers

  var os = require('os');
  var numCPUs = os.cpus().length;

  console.log('Starting cluster for ' + numCPUs + ' cpus...');

  for (var i = 0; i < numCPUs; i++) {
    cluster.fork();
  }

} else {

  // Worker
  // Arranco mi aplicaciÃ³n de forma normal

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);
  // var server = http.createServer(options, app); // ssl

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}
